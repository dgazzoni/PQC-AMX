#include <cstdint>
#include <cstring>

#include "gtest/gtest.h"
#include "test.h"
#include "test_amx.h"

extern "C" {
#include "polymodmul.h"
}

// We use this function to initialize AMX. The use of __attribute__((constructor)) ensures this function is called
// before main().
__attribute__((constructor)) void init_AMX(void) {
    AMX_SET();
}

static inline void ref_poly_mul_mod_65536_mod_x_d_plus_1_u16_nxn_coeffs(uint16_t xy[], const uint16_t x[],
                                                                        const uint16_t y[], size_t d) {
    memset(xy, 0, d * sizeof(uint16_t));

    for (size_t i = 0; i < d; i++) {
        for (size_t j = 0; j < d; j++) {
            xy[(i + j) % d] += ((i + j >= d) ? -1 : 1) * x[i] * y[j];
        }
    }
}

#ifdef POLYMODMUL_MATMUL
#define polymodmul polymodmul_matmul
#define polymodmul_n_d polymodmul_matmul_n_d
#endif

TEST(polymodmul, mod_x_n_plus_1_ref_matches_PARI_GP_d_256) {
    // Coefficients generated using the following PARI/GP code:
    //
    // ? setrand(1)
    // ? xv = vector(256, i, random(2^16))
    // %2 = [47188, 26849, 53259, 23558, 38084, 49189, 46691, 63893, 56782, 45692, 34949, 35561, 37652, 23956, 7708,
    // 3409, 14435, 30603, 18752, 14386, 1999, 10141, 64315, 47418, 25540, 29414, 61142, 35265, 22388, 49126, 3211,
    // 38301, 29465, 35104, 33873, 33471, 1264, 56858, 2049, 23248, 636, 37379, 9478, 37455, 7480, 17589, 907, 38541,
    // 65011, 22034, 35101, 57829, 46333, 22681, 61324, 1078, 61341, 63359, 53616, 17187, 55286, 36747, 55272, 11204,
    // 24572, 41852, 6630, 1380, 15202, 12637, 17201, 34954, 44198, 22460, 1776, 15779, 32074, 32086, 59536, 8468,
    // 55651, 57502, 59055, 18329, 35182, 19935, 49106, 38327, 23157, 50602, 29358, 16721, 48470, 31764, 34696, 3129,
    // 27435, 43735, 16458, 17823, 31643, 21395, 27309, 48303, 54267, 40968, 26048, 47778, 59256, 19483, 35689, 8829,
    // 44947, 52859, 48481, 52126, 7150, 8442, 8310, 53811, 15949, 63426, 14993, 18082, 7411, 53246, 10165, 8507, 31159,
    // 19802, 36329, 36129, 22478, 17185, 37075, 1362, 38406, 63461, 10308, 8662, 35069, 28960, 46077, 35227, 59991,
    // 29912, 2524, 30675, 35924, 60239, 29206, 58245, 47426, 24366, 11934, 13264, 63421, 42201, 15333, 19821, 63190,
    // 22117, 60658, 30798, 26353, 26892, 45828, 28132, 22949, 4766, 32771, 28062, 2134, 50687, 41641, 10485, 17829,
    // 22731, 43424, 58089, 11519, 19713, 22579, 28205, 58512, 26967, 2047, 1392, 44534, 37951, 16394, 12524, 10675,
    // 23256, 36006, 32279, 50631, 7738, 29690, 22630, 64205, 42274, 43094, 6050, 2531, 37915, 33230, 18625, 14656,
    // 65401, 48960, 50617, 18028, 42476, 62545, 6797, 31397, 57315, 35110, 39914, 41106, 55156, 22001, 14792, 33282,
    // 56834, 12607, 41247, 24518, 10865, 31104, 15138, 46345, 59137, 5616, 43871, 50130, 43204, 52136, 16630, 8457,
    // 44568, 11366, 25167, 30213, 43483, 29703, 15489, 12346, 50474, 37176, 52839, 22075, 43021, 13493, 33075]
    //
    // ? xp = Polrev(xv)
    // %3 = 33075*x^255 + 13493*x^254 + 43021*x^253 + 22075*x^252 + 52839*x^251 + 37176*x^250 + 50474*x^249 +
    // 12346*x^248 + 15489*x^247 + 29703*x^246 + 43483*x^245 + 30213*x^244 + 25167*x^243 + 11366*x^242 + 44568*x^241 +
    // 8457*x^240 + 16630*x^239 + 52136*x^238 + 43204*x^237 + 50130*x^236 + 43871*x^235 + 5616*x^234 + 59137*x^233 +
    // 46345*x^232 + 15138*x^231 + 31104*x^230 + 10865*x^229 + 24518*x^228 + 41247*x^227 + 12607*x^226 + 56834*x^225 +
    // 33282*x^224 + 14792*x^223 + 22001*x^222 + 55156*x^221 + 41106*x^220 + 39914*x^219 + 35110*x^218 + 57315*x^217 +
    // 31397*x^216 + 6797*x^215 + 62545*x^214 + 42476*x^213 + 18028*x^212 + 50617*x^211 + 48960*x^210 + 65401*x^209 +
    // 14656*x^208 + 18625*x^207 + 33230*x^206 + 37915*x^205 + 2531*x^204 + 6050*x^203 + 43094*x^202 + 42274*x^201 +
    // 64205*x^200 + 22630*x^199 + 29690*x^198 + 7738*x^197 + 50631*x^196 + 32279*x^195 + 36006*x^194 + 23256*x^193 +
    // 10675*x^192 + 12524*x^191 + 16394*x^190 + 37951*x^189 + 44534*x^188 + 1392*x^187 + 2047*x^186 + 26967*x^185 +
    // 58512*x^184 + 28205*x^183 + 22579*x^182 + 19713*x^181 + 11519*x^180 + 58089*x^179 + 43424*x^178 + 22731*x^177 +
    // 17829*x^176 + 10485*x^175 + 41641*x^174 + 50687*x^173 + 2134*x^172 + 28062*x^171 + 32771*x^170 + 4766*x^169 +
    // 22949*x^168 + 28132*x^167 + 45828*x^166 + 26892*x^165 + 26353*x^164 + 30798*x^163 + 60658*x^162 + 22117*x^161 +
    // 63190*x^160 + 19821*x^159 + 15333*x^158 + 42201*x^157 + 63421*x^156 + 13264*x^155 + 11934*x^154 + 24366*x^153 +
    // 47426*x^152 + 58245*x^151 + 29206*x^150 + 60239*x^149 + 35924*x^148 + 30675*x^147 + 2524*x^146 + 29912*x^145 +
    // 59991*x^144 + 35227*x^143 + 46077*x^142 + 28960*x^141 + 35069*x^140 + 8662*x^139 + 10308*x^138 + 63461*x^137 +
    // 38406*x^136 + 1362*x^135 + 37075*x^134 + 17185*x^133 + 22478*x^132 + 36129*x^131 + 36329*x^130 + 19802*x^129 +
    // 31159*x^128 + 8507*x^127 + 10165*x^126 + 53246*x^125 + 7411*x^124 + 18082*x^123 + 14993*x^122 + 63426*x^121 +
    // 15949*x^120 + 53811*x^119 + 8310*x^118 + 8442*x^117 + 7150*x^116 + 52126*x^115 + 48481*x^114 + 52859*x^113 +
    // 44947*x^112 + 8829*x^111 + 35689*x^110 + 19483*x^109 + 59256*x^108 + 47778*x^107 + 26048*x^106 + 40968*x^105 +
    // 54267*x^104 + 48303*x^103 + 27309*x^102 + 21395*x^101 + 31643*x^100 + 17823*x^99 + 16458*x^98 + 43735*x^97 +
    // 27435*x^96 + 3129*x^95 + 34696*x^94 + 31764*x^93 + 48470*x^92 + 16721*x^91 + 29358*x^90 + 50602*x^89 + 23157*x^88
    // + 38327*x^87 + 49106*x^86 + 19935*x^85 + 35182*x^84 + 18329*x^83 + 59055*x^82 + 57502*x^81 + 55651*x^80 +
    // 8468*x^79 + 59536*x^78 + 32086*x^77 + 32074*x^76 + 15779*x^75 + 1776*x^74 + 22460*x^73 + 44198*x^72 + 34954*x^71
    // + 17201*x^70 + 12637*x^69 + 15202*x^68 + 1380*x^67 + 6630*x^66 + 41852*x^65 + 24572*x^64 + 11204*x^63 +
    // 55272*x^62 + 36747*x^61 + 55286*x^60 + 17187*x^59 + 53616*x^58 + 63359*x^57 + 61341*x^56 + 1078*x^55 + 61324*x^54
    // + 22681*x^53 + 46333*x^52 + 57829*x^51 + 35101*x^50 + 22034*x^49 + 65011*x^48 + 38541*x^47 + 907*x^46 +
    // 17589*x^45 + 7480*x^44 + 37455*x^43 + 9478*x^42 + 37379*x^41 + 636*x^40 + 23248*x^39 + 2049*x^38 + 56858*x^37 +
    // 1264*x^36 + 33471*x^35 + 33873*x^34 + 35104*x^33 + 29465*x^32 + 38301*x^31 + 3211*x^30 + 49126*x^29 + 22388*x^28
    // + 35265*x^27 + 61142*x^26 + 29414*x^25 + 25540*x^24 + 47418*x^23 + 64315*x^22 + 10141*x^21 + 1999*x^20 +
    // 14386*x^19 + 18752*x^18 + 30603*x^17 + 14435*x^16 + 3409*x^15 + 7708*x^14 + 23956*x^13 + 37652*x^12 + 35561*x^11
    // + 34949*x^10 + 45692*x^9 + 56782*x^8 + 63893*x^7 + 46691*x^6 + 49189*x^5 + 38084*x^4 + 23558*x^3 + 53259*x^2 +
    // 26849*x + 47188
    //
    // ? yv = vector(256,i,random(2^16))
    // %4 = [19021, 20368, 60464, 22135, 37334, 44125, 52464, 48482, 45970, 30153, 44633, 27448, 49641, 21690, 3270,
    // 26499, 23479, 2417, 19109, 56797, 1154, 63400, 16007, 51806, 40098, 7115, 53532, 8741, 63606, 20044, 26462,
    // 64839, 56162, 25448, 39972, 22578, 44262, 54018, 11281, 58512, 17618, 1319, 38290, 51791, 49859, 40977, 18586,
    // 37762, 23773, 27889, 55846, 23892, 24347, 46759, 13733, 17013, 650, 10771, 20591, 48278, 3264, 31947, 55958,
    // 64238, 22552, 18634, 31428, 2672, 3658, 42138, 50327, 49271, 19717, 18581, 43820, 59855, 25555, 35345, 34254,
    // 42996, 23257, 47841, 18192, 56526, 47086, 47029, 28802, 57771, 3108, 63747, 20653, 57333, 55921, 16588, 8910,
    // 38504, 22511, 63457, 35933, 61113, 65366, 52245, 52488, 58847, 51124, 48, 10559, 17114, 10207, 40506, 49101,
    // 42248, 40019, 58051, 47955, 42829, 54539, 24263, 25891, 63601, 64112, 34880, 1636, 6211, 56745, 50995, 12756,
    // 41981, 39608, 43167, 23467, 42114, 25175, 30104, 48955, 33008, 62348, 50273, 18074, 21848, 65494, 17549, 6723,
    // 14629, 49521, 49433, 1462, 20919, 35832, 50673, 2050, 22362, 51636, 35868, 17197, 26297, 29781, 1353, 53089,
    // 12066, 12756, 19189, 58144, 50060, 57490, 40468, 63879, 49033, 24482, 5552, 50198, 11031, 45478, 39492, 24322,
    // 40060, 42346, 55201, 65481, 57763, 52282, 58580, 64327, 19837, 9277, 39792, 36410, 13812, 11789, 59544, 54488,
    // 58419, 63956, 27707, 53067, 53645, 6772, 16305, 8302, 35095, 39305, 41528, 11370, 31324, 52253, 6292, 46658,
    // 4732, 37574, 4068, 25604, 44437, 40555, 27415, 17176, 21316, 29511, 49351, 1444, 49991, 64548, 45485, 57429,
    // 19981, 1089, 41155, 38519, 53598, 42437, 41534, 58043, 24062, 7881, 46684, 38214, 10454, 46537, 58771, 6054,
    // 62727, 55076, 17666, 47696, 29192, 28107, 5782, 9511, 16570, 15050, 50566, 36358, 9303, 53519, 27120, 13503,
    // 48497]
    //
    // ? yp = Polrev(yv)
    // %5 = 48497*x^255 + 13503*x^254 + 27120*x^253 + 53519*x^252 + 9303*x^251 + 36358*x^250 + 50566*x^249 + 15050*x^248
    // + 16570*x^247 + 9511*x^246 + 5782*x^245 + 28107*x^244 + 29192*x^243 + 47696*x^242 + 17666*x^241 + 55076*x^240 +
    // 62727*x^239 + 6054*x^238 + 58771*x^237 + 46537*x^236 + 10454*x^235 + 38214*x^234 + 46684*x^233 + 7881*x^232 +
    // 24062*x^231 + 58043*x^230 + 41534*x^229 + 42437*x^228 + 53598*x^227 + 38519*x^226 + 41155*x^225 + 1089*x^224 +
    // 19981*x^223 + 57429*x^222 + 45485*x^221 + 64548*x^220 + 49991*x^219 + 1444*x^218 + 49351*x^217 + 29511*x^216 +
    // 21316*x^215 + 17176*x^214 + 27415*x^213 + 40555*x^212 + 44437*x^211 + 25604*x^210 + 4068*x^209 + 37574*x^208 +
    // 4732*x^207 + 46658*x^206 + 6292*x^205 + 52253*x^204 + 31324*x^203 + 11370*x^202 + 41528*x^201 + 39305*x^200 +
    // 35095*x^199 + 8302*x^198 + 16305*x^197 + 6772*x^196 + 53645*x^195 + 53067*x^194 + 27707*x^193 + 63956*x^192 +
    // 58419*x^191 + 54488*x^190 + 59544*x^189 + 11789*x^188 + 13812*x^187 + 36410*x^186 + 39792*x^185 + 9277*x^184 +
    // 19837*x^183 + 64327*x^182 + 58580*x^181 + 52282*x^180 + 57763*x^179 + 65481*x^178 + 55201*x^177 + 42346*x^176 +
    // 40060*x^175 + 24322*x^174 + 39492*x^173 + 45478*x^172 + 11031*x^171 + 50198*x^170 + 5552*x^169 + 24482*x^168 +
    // 49033*x^167 + 63879*x^166 + 40468*x^165 + 57490*x^164 + 50060*x^163 + 58144*x^162 + 19189*x^161 + 12756*x^160 +
    // 12066*x^159 + 53089*x^158 + 1353*x^157 + 29781*x^156 + 26297*x^155 + 17197*x^154 + 35868*x^153 + 51636*x^152 +
    // 22362*x^151 + 2050*x^150 + 50673*x^149 + 35832*x^148 + 20919*x^147 + 1462*x^146 + 49433*x^145 + 49521*x^144 +
    // 14629*x^143 + 6723*x^142 + 17549*x^141 + 65494*x^140 + 21848*x^139 + 18074*x^138 + 50273*x^137 + 62348*x^136 +
    // 33008*x^135 + 48955*x^134 + 30104*x^133 + 25175*x^132 + 42114*x^131 + 23467*x^130 + 43167*x^129 + 39608*x^128 +
    // 41981*x^127 + 12756*x^126 + 50995*x^125 + 56745*x^124 + 6211*x^123 + 1636*x^122 + 34880*x^121 + 64112*x^120 +
    // 63601*x^119 + 25891*x^118 + 24263*x^117 + 54539*x^116 + 42829*x^115 + 47955*x^114 + 58051*x^113 + 40019*x^112 +
    // 42248*x^111 + 49101*x^110 + 40506*x^109 + 10207*x^108 + 17114*x^107 + 10559*x^106 + 48*x^105 + 51124*x^104 +
    // 58847*x^103 + 52488*x^102 + 52245*x^101 + 65366*x^100 + 61113*x^99 + 35933*x^98 + 63457*x^97 + 22511*x^96 +
    // 38504*x^95 + 8910*x^94 + 16588*x^93 + 55921*x^92 + 57333*x^91 + 20653*x^90 + 63747*x^89 + 3108*x^88 + 57771*x^87
    // + 28802*x^86 + 47029*x^85 + 47086*x^84 + 56526*x^83 + 18192*x^82 + 47841*x^81 + 23257*x^80 + 42996*x^79 +
    // 34254*x^78 + 35345*x^77 + 25555*x^76 + 59855*x^75 + 43820*x^74 + 18581*x^73 + 19717*x^72 + 49271*x^71 +
    // 50327*x^70 + 42138*x^69 + 3658*x^68 + 2672*x^67 + 31428*x^66 + 18634*x^65 + 22552*x^64 + 64238*x^63 + 55958*x^62
    // + 31947*x^61 + 3264*x^60 + 48278*x^59 + 20591*x^58 + 10771*x^57 + 650*x^56 + 17013*x^55 + 13733*x^54 + 46759*x^53
    // + 24347*x^52 + 23892*x^51 + 55846*x^50 + 27889*x^49 + 23773*x^48 + 37762*x^47 + 18586*x^46 + 40977*x^45 +
    // 49859*x^44 + 51791*x^43 + 38290*x^42 + 1319*x^41 + 17618*x^40 + 58512*x^39 + 11281*x^38 + 54018*x^37 + 44262*x^36
    // + 22578*x^35 + 39972*x^34 + 25448*x^33 + 56162*x^32 + 64839*x^31 + 26462*x^30 + 20044*x^29 + 63606*x^28 +
    // 8741*x^27 + 53532*x^26 + 7115*x^25 + 40098*x^24 + 51806*x^23 + 16007*x^22 + 63400*x^21 + 1154*x^20 + 56797*x^19 +
    // 19109*x^18 + 2417*x^17 + 23479*x^16 + 26499*x^15 + 3270*x^14 + 21690*x^13 + 49641*x^12 + 27448*x^11 + 44633*x^10
    // + 30153*x^9 + 45970*x^8 + 48482*x^7 + 52464*x^6 + 44125*x^5 + 37334*x^4 + 22135*x^3 + 60464*x^2 + 20368*x + 19021
    //
    // ? xyp = lift(lift(Mod(Mod(xp * yp, 2^16), x^256 + 1)))
    // %6 = 5761*x^255 + 51929*x^254 + 19521*x^253 + 670*x^252 + 40814*x^251 + 51806*x^250 + 40750*x^249 + 51006*x^248 +
    // 40318*x^247 + 14369*x^246 + 13482*x^245 + 17911*x^244 + 29502*x^243 + 61572*x^242 + 33600*x^241 + 26502*x^240 +
    // 46453*x^239 + 35502*x^238 + 34656*x^237 + 53651*x^236 + 18038*x^235 + 19815*x^234 + 5180*x^233 + 11182*x^232 +
    // 64086*x^231 + 14333*x^230 + 60189*x^229 + 56159*x^228 + 8503*x^227 + 26433*x^226 + 38316*x^225 + 55509*x^224 +
    // 38648*x^223 + 48225*x^222 + 36810*x^221 + 33688*x^220 + 37804*x^219 + 50338*x^218 + 55985*x^217 + 39694*x^216 +
    // 4408*x^215 + 13879*x^214 + 4787*x^213 + 34235*x^212 + 17769*x^211 + 19538*x^210 + 61572*x^209 + 28607*x^208 +
    // 43751*x^207 + 55359*x^206 + 31678*x^205 + 31750*x^204 + 7297*x^203 + 38807*x^202 + 36626*x^201 + 31447*x^200 +
    // 62832*x^199 + 21516*x^198 + 61009*x^197 + 8413*x^196 + 16806*x^195 + 37667*x^194 + 50654*x^193 + 26949*x^192 +
    // 35325*x^191 + 22406*x^190 + 60683*x^189 + 57983*x^188 + 61803*x^187 + 30004*x^186 + 10306*x^185 + 1785*x^184 +
    // 10853*x^183 + 52857*x^182 + 9596*x^181 + 27384*x^180 + 3523*x^179 + 24800*x^178 + 24190*x^177 + 27892*x^176 +
    // 8936*x^175 + 53516*x^174 + 39492*x^173 + 45568*x^172 + 58776*x^171 + 4562*x^170 + 11854*x^169 + 15400*x^168 +
    // 30298*x^167 + 55605*x^166 + 36710*x^165 + 48619*x^164 + 59017*x^163 + 14948*x^162 + 23563*x^161 + 36879*x^160 +
    // 58816*x^159 + 3987*x^158 + 382*x^157 + 25860*x^156 + 23364*x^155 + 62056*x^154 + 8948*x^153 + 47807*x^152 +
    // 6493*x^151 + 80*x^150 + 38165*x^149 + 8496*x^148 + 13936*x^147 + 7548*x^146 + 25051*x^145 + 5779*x^144 +
    // 19318*x^143 + 48585*x^142 + 32844*x^141 + 30560*x^140 + 22599*x^139 + 7608*x^138 + 50850*x^137 + 42358*x^136 +
    // 10818*x^135 + 16323*x^134 + 20927*x^133 + 25030*x^132 + 59283*x^131 + 27218*x^130 + 13783*x^129 + 2146*x^128 +
    // 288*x^127 + 41570*x^126 + 6888*x^125 + 25505*x^124 + 39186*x^123 + 12069*x^122 + 13503*x^121 + 35193*x^120 +
    // 2883*x^119 + 32803*x^118 + 63555*x^117 + 25993*x^116 + 28307*x^115 + 15476*x^114 + 11954*x^113 + 48248*x^112 +
    // 32968*x^111 + 46075*x^110 + 12084*x^109 + 38050*x^108 + 55064*x^107 + 2390*x^106 + 16445*x^105 + 7924*x^104 +
    // 36353*x^103 + 30755*x^102 + 41275*x^101 + 10726*x^100 + 8936*x^99 + 9745*x^98 + 50192*x^97 + 5668*x^96 +
    // 23393*x^95 + 54151*x^94 + 51178*x^93 + 30221*x^92 + 54190*x^91 + 35277*x^90 + 33833*x^89
    // + 58896*x^88 + 8118*x^87 + 49175*x^86 + 9207*x^85 + 52602*x^84 + 46335*x^83 + 9917*x^82 + 16983*x^81 + 10520*x^80
    // + 59395*x^79 + 19725*x^78 + 1923*x^77 + 25827*x^76 + 33969*x^75 + 34233*x^74 + 28990*x^73 + 49181*x^72 +
    // 52814*x^71 + 65049*x^70 + 5736*x^69 + 64163*x^68 + 58469*x^67 + 20553*x^66 + 18175*x^65 + 57958*x^64 + 19178*x^63
    // + 17396*x^62 + 61773*x^61 + 19616*x^60 + 37863*x^59 + 3505*x^58 + 19453*x^57 + 1408*x^56 + 41766*x^55 +
    // 10660*x^54 + 19753*x^53 + 9398*x^52 + 50373*x^51 + 41193*x^50 + 8634*x^49 + 27169*x^48 + 44663*x^47 + 30034*x^46
    // + 20293*x^45 + 24117*x^44 + 62679*x^43 + 8067*x^42 + 13619*x^41 + 14578*x^40 + 24932*x^39 + 48598*x^38 +
    // 22977*x^37 + 27176*x^36 + 62769*x^35 + 44893*x^34 + 16213*x^33 + 30033*x^32 + 34020*x^31 + 37307*x^30 +
    // 46203*x^29 + 6246*x^28 + 45351*x^27 + 17983*x^26 + 39466*x^25 + 28282*x^24 + 48468*x^23 + 22843*x^22 + 47370*x^21
    // + 44719*x^20 + 34982*x^19 + 53072*x^18 + 59108*x^17 + 60418*x^16 + 64504*x^15 + 51663*x^14 + 17854*x^13 +
    // 6995*x^12 + 34531*x^11 + 29307*x^10 + 61107*x^9 + 23721*x^8 + 44890*x^7 + 22449*x^6 + 49626*x^5 + 13236*x^4 +
    // 16443*x^3 + 16979*x^2 + 10223*x + 27657
    //
    // ? xyv = Vecrev(xyp)
    // %7 = [27657, 10223, 16979, 16443, 13236, 49626, 22449, 44890, 23721, 61107, 29307, 34531, 6995, 17854, 51663,
    // 64504, 60418, 59108, 53072, 34982, 44719, 47370, 22843, 48468, 28282, 39466, 17983, 45351, 6246, 46203, 37307,
    // 34020, 30033, 16213, 44893, 62769, 27176, 22977, 48598, 24932, 14578, 13619, 8067, 62679, 24117, 20293, 30034,
    // 44663, 27169, 8634, 41193, 50373, 9398, 19753, 10660, 41766, 1408, 19453, 3505, 37863, 19616, 61773, 17396,
    // 19178, 57958, 18175, 20553, 58469, 64163, 5736, 65049, 52814, 49181, 28990, 34233, 33969, 25827, 1923, 19725,
    // 59395, 10520, 16983, 9917, 46335, 52602, 9207, 49175, 8118, 58896, 33833, 35277, 54190, 30221, 51178, 54151,
    // 23393, 5668, 50192, 9745, 8936, 10726, 41275, 30755, 36353, 7924, 16445, 2390, 55064, 38050, 12084, 46075, 32968,
    // 48248, 11954, 15476, 28307, 25993, 63555, 32803, 2883, 35193, 13503, 12069, 39186, 25505, 6888, 41570, 288, 2146,
    // 13783, 27218, 59283, 25030, 20927, 16323, 10818, 42358, 50850, 7608, 22599, 30560, 32844, 48585, 19318, 5779,
    // 25051, 7548, 13936, 8496, 38165, 80, 6493, 47807, 8948, 62056, 23364, 25860, 382, 3987, 58816, 36879, 23563,
    // 14948, 59017, 48619, 36710, 55605, 30298, 15400, 11854, 4562, 58776, 45568, 39492, 53516, 8936, 27892, 24190,
    // 24800, 3523, 27384, 9596, 52857, 10853, 1785, 10306, 30004, 61803, 57983, 60683, 22406, 35325, 26949, 50654,
    // 37667, 16806, 8413, 61009, 21516, 62832, 31447, 36626, 38807, 7297, 31750, 31678, 55359, 43751, 28607, 61572,
    // 19538, 17769, 34235, 4787, 13879, 4408, 39694, 55985, 50338, 37804, 33688, 36810, 48225, 38648, 55509, 38316,
    // 26433, 8503, 56159, 60189, 14333, 64086, 11182, 5180, 19815, 18038, 53651, 34656, 35502, 46453, 26502, 33600,
    // 61572, 29502, 17911, 13482, 14369, 40318, 51006, 40750, 51806, 40814, 670, 19521, 51929, 5761]

    const uint16_t x[256] = {
        47188, 26849, 53259, 23558, 38084, 49189, 46691, 63893, 56782, 45692, 34949, 35561, 37652, 23956, 7708,  3409,
        14435, 30603, 18752, 14386, 1999,  10141, 64315, 47418, 25540, 29414, 61142, 35265, 22388, 49126, 3211,  38301,
        29465, 35104, 33873, 33471, 1264,  56858, 2049,  23248, 636,   37379, 9478,  37455, 7480,  17589, 907,   38541,
        65011, 22034, 35101, 57829, 46333, 22681, 61324, 1078,  61341, 63359, 53616, 17187, 55286, 36747, 55272, 11204,
        24572, 41852, 6630,  1380,  15202, 12637, 17201, 34954, 44198, 22460, 1776,  15779, 32074, 32086, 59536, 8468,
        55651, 57502, 59055, 18329, 35182, 19935, 49106, 38327, 23157, 50602, 29358, 16721, 48470, 31764, 34696, 3129,
        27435, 43735, 16458, 17823, 31643, 21395, 27309, 48303, 54267, 40968, 26048, 47778, 59256, 19483, 35689, 8829,
        44947, 52859, 48481, 52126, 7150,  8442,  8310,  53811, 15949, 63426, 14993, 18082, 7411,  53246, 10165, 8507,
        31159, 19802, 36329, 36129, 22478, 17185, 37075, 1362,  38406, 63461, 10308, 8662,  35069, 28960, 46077, 35227,
        59991, 29912, 2524,  30675, 35924, 60239, 29206, 58245, 47426, 24366, 11934, 13264, 63421, 42201, 15333, 19821,
        63190, 22117, 60658, 30798, 26353, 26892, 45828, 28132, 22949, 4766,  32771, 28062, 2134,  50687, 41641, 10485,
        17829, 22731, 43424, 58089, 11519, 19713, 22579, 28205, 58512, 26967, 2047,  1392,  44534, 37951, 16394, 12524,
        10675, 23256, 36006, 32279, 50631, 7738,  29690, 22630, 64205, 42274, 43094, 6050,  2531,  37915, 33230, 18625,
        14656, 65401, 48960, 50617, 18028, 42476, 62545, 6797,  31397, 57315, 35110, 39914, 41106, 55156, 22001, 14792,
        33282, 56834, 12607, 41247, 24518, 10865, 31104, 15138, 46345, 59137, 5616,  43871, 50130, 43204, 52136, 16630,
        8457,  44568, 11366, 25167, 30213, 43483, 29703, 15489, 12346, 50474, 37176, 52839, 22075, 43021, 13493, 33075};
    const uint16_t y[256] = {
        19021, 20368, 60464, 22135, 37334, 44125, 52464, 48482, 45970, 30153, 44633, 27448, 49641, 21690, 3270,  26499,
        23479, 2417,  19109, 56797, 1154,  63400, 16007, 51806, 40098, 7115,  53532, 8741,  63606, 20044, 26462, 64839,
        56162, 25448, 39972, 22578, 44262, 54018, 11281, 58512, 17618, 1319,  38290, 51791, 49859, 40977, 18586, 37762,
        23773, 27889, 55846, 23892, 24347, 46759, 13733, 17013, 650,   10771, 20591, 48278, 3264,  31947, 55958, 64238,
        22552, 18634, 31428, 2672,  3658,  42138, 50327, 49271, 19717, 18581, 43820, 59855, 25555, 35345, 34254, 42996,
        23257, 47841, 18192, 56526, 47086, 47029, 28802, 57771, 3108,  63747, 20653, 57333, 55921, 16588, 8910,  38504,
        22511, 63457, 35933, 61113, 65366, 52245, 52488, 58847, 51124, 48,    10559, 17114, 10207, 40506, 49101, 42248,
        40019, 58051, 47955, 42829, 54539, 24263, 25891, 63601, 64112, 34880, 1636,  6211,  56745, 50995, 12756, 41981,
        39608, 43167, 23467, 42114, 25175, 30104, 48955, 33008, 62348, 50273, 18074, 21848, 65494, 17549, 6723,  14629,
        49521, 49433, 1462,  20919, 35832, 50673, 2050,  22362, 51636, 35868, 17197, 26297, 29781, 1353,  53089, 12066,
        12756, 19189, 58144, 50060, 57490, 40468, 63879, 49033, 24482, 5552,  50198, 11031, 45478, 39492, 24322, 40060,
        42346, 55201, 65481, 57763, 52282, 58580, 64327, 19837, 9277,  39792, 36410, 13812, 11789, 59544, 54488, 58419,
        63956, 27707, 53067, 53645, 6772,  16305, 8302,  35095, 39305, 41528, 11370, 31324, 52253, 6292,  46658, 4732,
        37574, 4068,  25604, 44437, 40555, 27415, 17176, 21316, 29511, 49351, 1444,  49991, 64548, 45485, 57429, 19981,
        1089,  41155, 38519, 53598, 42437, 41534, 58043, 24062, 7881,  46684, 38214, 10454, 46537, 58771, 6054,  62727,
        55076, 17666, 47696, 29192, 28107, 5782,  9511,  16570, 15050, 50566, 36358, 9303,  53519, 27120, 13503, 48497};
    const uint16_t xy_expected[256] = {
        27657, 10223, 16979, 16443, 13236, 49626, 22449, 44890, 23721, 61107, 29307, 34531, 6995,  17854, 51663, 64504,
        60418, 59108, 53072, 34982, 44719, 47370, 22843, 48468, 28282, 39466, 17983, 45351, 6246,  46203, 37307, 34020,
        30033, 16213, 44893, 62769, 27176, 22977, 48598, 24932, 14578, 13619, 8067,  62679, 24117, 20293, 30034, 44663,
        27169, 8634,  41193, 50373, 9398,  19753, 10660, 41766, 1408,  19453, 3505,  37863, 19616, 61773, 17396, 19178,
        57958, 18175, 20553, 58469, 64163, 5736,  65049, 52814, 49181, 28990, 34233, 33969, 25827, 1923,  19725, 59395,
        10520, 16983, 9917,  46335, 52602, 9207,  49175, 8118,  58896, 33833, 35277, 54190, 30221, 51178, 54151, 23393,
        5668,  50192, 9745,  8936,  10726, 41275, 30755, 36353, 7924,  16445, 2390,  55064, 38050, 12084, 46075, 32968,
        48248, 11954, 15476, 28307, 25993, 63555, 32803, 2883,  35193, 13503, 12069, 39186, 25505, 6888,  41570, 288,
        2146,  13783, 27218, 59283, 25030, 20927, 16323, 10818, 42358, 50850, 7608,  22599, 30560, 32844, 48585, 19318,
        5779,  25051, 7548,  13936, 8496,  38165, 80,    6493,  47807, 8948,  62056, 23364, 25860, 382,   3987,  58816,
        36879, 23563, 14948, 59017, 48619, 36710, 55605, 30298, 15400, 11854, 4562,  58776, 45568, 39492, 53516, 8936,
        27892, 24190, 24800, 3523,  27384, 9596,  52857, 10853, 1785,  10306, 30004, 61803, 57983, 60683, 22406, 35325,
        26949, 50654, 37667, 16806, 8413,  61009, 21516, 62832, 31447, 36626, 38807, 7297,  31750, 31678, 55359, 43751,
        28607, 61572, 19538, 17769, 34235, 4787,  13879, 4408,  39694, 55985, 50338, 37804, 33688, 36810, 48225, 38648,
        55509, 38316, 26433, 8503,  56159, 60189, 14333, 64086, 11182, 5180,  19815, 18038, 53651, 34656, 35502, 46453,
        26502, 33600, 61572, 29502, 17911, 13482, 14369, 40318, 51006, 40750, 51806, 40814, 670,   19521, 51929, 5761};
    uint16_t xy[256];

    ref_poly_mul_mod_65536_mod_x_d_plus_1_u16_nxn_coeffs(xy, x, y, 256);

    ASSERT_TRUE(ArraysMatch(xy_expected, xy));
}

TEST(polymodmul, mod_x_n_plus_1_ref_matches_AMX_128_coeffs) {
    uint16_t x[256] __attribute__((aligned(128)));
    uint16_t y[256] __attribute__((aligned(128)));
    uint16_t xy2[256] __attribute__((aligned(128)));
    uint16_t xy[256] __attribute__((aligned(128)));

    srand(1337);

    gen_random(x, 128);
    gen_random(y, 128);
    memset(&x[128], 0, 128 * sizeof(uint16_t));
    memset(&y[128], 0, 128 * sizeof(uint16_t));

    ref_poly_mul_mod_65536_mod_x_d_plus_1_u16_nxn_coeffs(xy2, x, y, 256);

#ifdef INIT_AMX
    AMX_SET();
#endif

    clobber_all_AMX_regs();
    amx_poly_mul_mod_65536_mod_x_d_plus_1_u16_32nx32n_coeffs(xy, x, y, 256, 8);

#ifdef INIT_AMX
    AMX_CLR();
#endif

    ASSERT_TRUE(ArraysMatch(xy2, xy));
}

TEST(polymodmul, mod_x_n_plus_1_ref_matches_AMX_256_coeffs) {
    uint16_t x[256] __attribute__((aligned(128)));
    uint16_t y[256] __attribute__((aligned(128)));
    uint16_t xy2[256] __attribute__((aligned(128)));
    uint16_t xy[256] __attribute__((aligned(128)));

    srand(1337);

    gen_random(x, 256);
    gen_random(y, 256);

    ref_poly_mul_mod_65536_mod_x_d_plus_1_u16_nxn_coeffs(xy2, x, y, 256);

#ifdef INIT_AMX
    AMX_SET();
#endif

    clobber_all_AMX_regs();
    amx_poly_mul_mod_65536_mod_x_d_plus_1_u16_32nx32n_coeffs(xy, x, y, 256, 8);

#ifdef INIT_AMX
    AMX_CLR();
#endif

    ASSERT_TRUE(ArraysMatch(xy2, xy));
}

class polymodmul_n_d : public testing::TestWithParam<int> {};

static inline std::string generate_polymulmod_n_d_test_name(const testing::TestParamInfo<int> &info) {
    int d = info.param;
    int n = ((d + 31) / 32);
    return std::string("n_") + std::to_string(n) + std::string("_d_") + std::to_string(d);
}

TEST_P(polymodmul_n_d, single) {
    uint16_t *x = NULL, *y = NULL, *xy = NULL, *xy2 = NULL;
    int d = GetParam();
    int n = ((d + 31) / 32);

    posix_memalign((void **)&x, 128, 32 * n * sizeof(uint16_t));
    posix_memalign((void **)&y, 128, 32 * n * sizeof(uint16_t));
    posix_memalign((void **)&xy, 128, 32 * n * sizeof(uint16_t));
    posix_memalign((void **)&xy2, 128, 32 * n * sizeof(uint16_t));

    srand(1337);

    gen_random(x, 32 * n);
    gen_random(y, 32 * n);
    memset(xy2, 0, 32 * n * sizeof(uint16_t));

    ref_poly_mul_mod_65536_mod_x_d_plus_1_u16_nxn_coeffs(xy2, x, y, d);

#ifdef INIT_AMX
    AMX_SET();
#endif

    clobber_all_AMX_regs();
    amx_poly_mul_mod_65536_mod_x_d_plus_1_u16_32nx32n_coeffs(xy, x, y, d, n);

#ifdef INIT_AMX
    AMX_CLR();
#endif

    EXPECT_TRUE(ArraysMatch(xy2, xy, d));

    free(x);
    free(y);
    free(xy);
    free(xy2);
}

TEST_P(polymodmul_n_d, initialize_to_zero) {
    uint16_t *x = NULL, *y = NULL, *xy = NULL, *xy2 = NULL;
    int d = GetParam();
    int n = ((d + 31) / 32);

    posix_memalign((void **)&x, 128, 32 * n * sizeof(uint16_t));
    posix_memalign((void **)&y, 128, 32 * n * sizeof(uint16_t));
    posix_memalign((void **)&xy, 128, 32 * n * sizeof(uint16_t));
    posix_memalign((void **)&xy2, 128, 32 * n * sizeof(uint16_t));

    srand(1337);

    gen_random(x, 32 * n);
    gen_random(y, 32 * n);
    memset(xy2, 0, 32 * n * sizeof(uint16_t));

    ref_poly_mul_mod_65536_mod_x_d_plus_1_u16_nxn_coeffs(xy2, x, y, d);

#ifdef INIT_AMX
    AMX_SET();
#endif

    clobber_all_AMX_regs();
    amx_poly_mul_mod_65536_mod_x_d_plus_1_u16_32nx32n_coeffs(xy, x, y, d, n);
    clobber_all_AMX_regs();
    amx_poly_mul_mod_65536_mod_x_d_plus_1_u16_32nx32n_coeffs(xy, x, y, d, n);

#ifdef INIT_AMX
    AMX_CLR();
#endif

    EXPECT_TRUE(ArraysMatch(xy2, xy, d));

    free(x);
    free(y);
    free(xy);
    free(xy2);
}

#ifdef POLYMODMUL_MATMUL
INSTANTIATE_TEST_SUITE_P(, polymodmul_n_d, testing::Values(256),
                         generate_polymulmod_n_d_test_name);
#else
INSTANTIATE_TEST_SUITE_P(, polymodmul_n_d, testing::Range(161, 512),
                         generate_polymulmod_n_d_test_name);
#endif
